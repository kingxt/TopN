package com.topn.action;

import java.util.List;

import javax.servlet.http.Cookie;

import net.sf.json.JSONObject;

import org.apache.log4j.Logger;
import org.apache.struts2.ServletActionContext;

import com.opensymphony.xwork2.ActionContext;
import com.opensymphony.xwork2.ActionSupport;
import com.topn.DAL.query.PersonalInfoQuery;
import com.topn.bean.Album;
import com.topn.bean.PersonalInfo;
import com.topn.bean.TO.PermissionsTO;
import com.topn.cache.MemCache;
import com.topn.cache.MemCacheProvider;
import com.topn.collection.UserInRegister;
import com.topn.controller.PersonalController;

/**
 * 创建人 youxishow 创建时间 2011-3-17 下午11:23:05 个人信息页面交互ACTION
 */
public class PersonalAction extends ActionSupport {

	private static Logger logger = Logger.getLogger(PersonalAction.class);
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	// 用户基本信息 JSON类型
	private String personInfo;
	private String year;
	private String month;
	private String day;

	// 用户相册信息 JSON类型
	private String personAlbum;

	private PersonalInfo pi;
	private PermissionsTO per;

	private int personalInfoId;

	public String getPersonInfo() {
		return personInfo;
	}

	public void setPersonInfo(String personInfo) {
		this.personInfo = personInfo;
	}

	public String getPersonAlbum() {
		return personAlbum;
	}

	public void setPersonAlbum(String personAlbum) {
		this.personAlbum = personAlbum;
	}

	public String toHomePage() {
		return SUCCESS;
	}

	/**
	 * 从缓存中获取用户的基本信息
	 * 
	 * @return json类型的用户信息
	 */
	public String getPersonalBasicInfo() {
		Cookie[] cookies = ServletActionContext.getRequest().getCookies();
		String personId = "";
		for (Cookie c : cookies) {
			if (c.getName().equals("id")) {
				personId = c.getValue();
				break;
			}
		}
		MemCache mc = MemCacheProvider.getInstance().buildCache(
				MemCacheProvider.MEMCACHE_TYPE_USER);
		PersonalInfo pi = (PersonalInfo) mc.get(personId);
		JSONObject jo = JSONObject.fromObject(pi);
		personInfo = jo.toString();

		return SUCCESS;
	}

	/**
	 * 更新用户信息，这里首先应该是查出数据
	 * 
	 * @return
	 */
	public String updateBaseInfo() {
		// 首先显示给用户基本信息
		Cookie[] cookies = ServletActionContext.getRequest().getCookies();
		int pId = 0;
		for (Cookie c : cookies) {
			if (c.getName().equals("id")) {
				pId = Integer.parseInt(c.getValue());
				break;
			}
		}
		PersonalInfo pi = PersonalController.getInstance().getPersonById(pId);
		ActionContext.getContext().put("pi", pi);
		return SUCCESS;
	}

	/**
	 * 更新输入操作
	 * 
	 * @return
	 */
	public String updateBaseInfoInput() {
		Cookie[] cookies = ServletActionContext.getRequest().getCookies();
		int pId = 0;
		for (Cookie c : cookies) {
			if (c.getName().equals("id")) {
				pId = Integer.parseInt(c.getValue());
				break;
			}
		}
		PersonalInfo pi = PersonalController.getInstance().getPersonById(pId);
		ActionContext.getContext().put("pi", pi);
		ActionContext.getContext().put("per",
				PermissionsTO.string2PermissionsTO(pi.getPermission()));

		return SUCCESS;
	}

	/**
	 * 更新基本信息至数据库
	 * 
	 * @return
	 */

	public String updatePersonalInfo() {

		Cookie[] cookies = ServletActionContext.getRequest().getCookies();
		for (Cookie c : cookies) {
			if (c.getName().equals("id")) {
				int pId = Integer.parseInt(c.getValue());
				pi.setPersonalInfoId(pId);
			} else if (c.getName().equals("username")) {
				pi.setTableName(UserInRegister.getTableName(c.getValue()));
			}
		}
		pi.setBirthday(year + "-" + month + "-" + day);
		pi.setPermission(PermissionsTO.permission2String(per));
		PersonalController.getInstance().updatePersonalInfo(pi);

		return SUCCESS;
	}

	/**
	 * 获取用户的所有相册
	 * 
	 * @return
	 */
	public String loadPersonalAlbum() {
		Cookie[] cookies = ServletActionContext.getRequest().getCookies();
		int pId = 0;
		for (Cookie c : cookies) {
			if (c.getName().equals("id")) {
				pId = Integer.parseInt(c.getValue());
				break;
			}

		}
		if (pId == 0)
			return ERROR;

		PersonalController pc = PersonalController.getInstance();
		List<Album> albums = pc.loadPersonalAlbum(pId);

		ActionContext.getContext().put("albums", albums);

		return SUCCESS;
	}

	public void setPersonalInfoId(int personalInfoId) {
		this.personalInfoId = personalInfoId;
	}

	public void setPi(PersonalInfo pi) {
		this.pi = pi;
	}

	public PersonalInfo getPi() {
		return pi;
	}

	public PermissionsTO getPer() {
		return per;
	}

	public int getPersonalInfoId() {
		return personalInfoId;
	}

	public void setPer(PermissionsTO per) {
		this.per = per;
	}

	public void setYear(String year) {
		this.year = year;
	}

	public void setMonth(String month) {
		this.month = month;
	}

	public void setDay(String day) {
		this.day = day;
	}

}
